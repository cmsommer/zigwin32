//! NOTE: this file is autogenerated, DO NOT MODIFY
//--------------------------------------------------------------------------------
// Section: Constants (105)
//--------------------------------------------------------------------------------
pub const CGD_DEFAULT = @as(u32, 0);
pub const CGD_UNKNOWN_PROPERTY = @as(u32, 0);
pub const CGD_STRING_PROPERTY = @as(u32, 1);
pub const CGD_DATE_PROPERTY = @as(u32, 2);
pub const CGD_BINARY_PROPERTY = @as(u32, 4);
pub const CGD_ARRAY_NODE = @as(u32, 8);
pub const CLSID_ContactAggregationManager = Guid.initString("96c8ad95-c199-44de-b34e-ac33c442df39");
pub const CONTACTPROP_PUB_NOTES = "Notes";
pub const CONTACTPROP_PUB_MAILER = "Mailer";
pub const CONTACTPROP_PUB_PROGID = "ProgID";
pub const CONTACTPROP_PUB_GENDER = "Gender";
pub const CONTACTPROP_PUB_GENDER_UNSPECIFIED = "Unspecified";
pub const CONTACTPROP_PUB_GENDER_MALE = "Male";
pub const CONTACTPROP_PUB_GENDER_FEMALE = "Female";
pub const CONTACTPROP_PUB_CREATIONDATE = "CreationDate";
pub const CONTACTPROP_PUB_L1_CONTACTIDCOLLECTION = "ContactIDCollection";
pub const CONTACTPROP_PUB_L2_CONTACTID = "/ContactID";
pub const CONTACTPROP_PUB_L3_VALUE = "/Value";
pub const CONTACTPROP_PUB_L1_NAMECOLLECTION = "NameCollection";
pub const CONTACTPROP_PUB_L2_NAME = "/Name";
pub const CONTACTPROP_PUB_L3_FORMATTEDNAME = "/FormattedName";
pub const CONTACTPROP_PUB_L3_PHONETIC = "/Phonetic";
pub const CONTACTPROP_PUB_L3_PREFIX = "/Prefix";
pub const CONTACTPROP_PUB_L3_TITLE = "/Title";
pub const CONTACTPROP_PUB_L3_GIVENNAME = "/GivenName";
pub const CONTACTPROP_PUB_L3_FAMILYNAME = "/FamilyName";
pub const CONTACTPROP_PUB_L3_MIDDLENAME = "/MiddleName";
pub const CONTACTPROP_PUB_L3_GENERATION = "/Generation";
pub const CONTACTPROP_PUB_L3_SUFFIX = "/Suffix";
pub const CONTACTPROP_PUB_L3_NICKNAME = "/NickName";
pub const CONTACTPROP_PUB_L1_POSITIONCOLLECTION = "PositionCollection";
pub const CONTACTPROP_PUB_L2_POSITION = "/Position";
pub const CONTACTPROP_PUB_L3_ORGANIZATION = "/Organization";
pub const CONTACTPROP_PUB_L3_COMPANY = "/Company";
pub const CONTACTPROP_PUB_L3_DEPARTMENT = "/Department";
pub const CONTACTPROP_PUB_L3_OFFICE = "/Office";
pub const CONTACTPROP_PUB_L3_JOB_TITLE = "/JobTitle";
pub const CONTACTPROP_PUB_L3_PROFESSION = "/Profession";
pub const CONTACTPROP_PUB_L3_ROLE = "/Role";
pub const CONTACTPROP_PUB_L1_PERSONCOLLECTION = "PersonCollection";
pub const CONTACTPROP_PUB_L2_PERSON = "/Person";
pub const CONTACTPROP_PUB_L3_PERSONID = "/PersonID";
pub const CONTACTPROP_PUB_L1_DATECOLLECTION = "DateCollection";
pub const CONTACTPROP_PUB_L2_DATE = "/Date";
pub const CONTACTPROP_PUB_L1_EMAILADDRESSCOLLECTION = "EmailAddressCollection";
pub const CONTACTPROP_PUB_L2_EMAILADDRESS = "/EmailAddress";
pub const CONTACTPROP_PUB_L3_ADDRESS = "/Address";
pub const CONTACTPROP_PUB_L3_TYPE = "/Type";
pub const CONTACTPROP_PUB_L1_CERTIFICATECOLLECTION = "CertificateCollection";
pub const CONTACTPROP_PUB_L2_CERTIFICATE = "/Certificate";
pub const CONTACTPROP_PUB_L3_THUMBPRINT = "/ThumbPrint";
pub const CONTACTPROP_PUB_L1_PHONENUMBERCOLLECTION = "PhoneNumberCollection";
pub const CONTACTPROP_PUB_L2_PHONENUMBER = "/PhoneNumber";
pub const CONTACTPROP_PUB_L3_NUMBER = "/Number";
pub const CONTACTPROP_PUB_L3_ALTERNATE = "/Alternate";
pub const CONTACTPROP_PUB_L1_PHYSICALADDRESSCOLLECTION = "PhysicalAddressCollection";
pub const CONTACTPROP_PUB_L2_PHYSICALADDRESS = "/PhysicalAddress";
pub const CONTACTPROP_PUB_L3_ADDRESSLABEL = "/AddressLabel";
pub const CONTACTPROP_PUB_L3_STREET = "/Street";
pub const CONTACTPROP_PUB_L3_LOCALITY = "/Locality";
pub const CONTACTPROP_PUB_L3_REGION = "/Region";
pub const CONTACTPROP_PUB_L3_POSTALCODE = "/PostalCode";
pub const CONTACTPROP_PUB_L3_COUNTRY = "/Country";
pub const CONTACTPROP_PUB_L3_POBOX = "/POBox";
pub const CONTACTPROP_PUB_L3_EXTENDEDADDRESS = "/ExtendedAddress";
pub const CONTACTPROP_PUB_L1_IMADDRESSCOLLECTION = "IMAddressCollection";
pub const CONTACTPROP_PUB_L2_IMADDRESSENTRY = "/IMAddress";
pub const CONTACTPROP_PUB_L3_PROTOCOL = "/Protocol";
pub const CONTACTPROP_PUB_L1_URLCOLLECTION = "UrlCollection";
pub const CONTACTPROP_PUB_L2_URL = "/Url";
pub const CONTACTPROP_PUB_L1_PHOTOCOLLECTION = "PhotoCollection";
pub const CONTACTPROP_PUB_L2_PHOTO = "/Photo";
pub const CONTACTPROP_PUB_L3_URL = "/Url";
pub const CONTACTLABEL_PUB_PREFERRED = "Preferred";
pub const CONTACTLABEL_PUB_PERSONAL = "Personal";
pub const CONTACTLABEL_PUB_BUSINESS = "Business";
pub const CONTACTLABEL_PUB_OTHER = "Other";
pub const CONTACTLABEL_PUB_VOICE = "Voice";
pub const CONTACTLABEL_PUB_MOBILE = "Mobile";
pub const CONTACTLABEL_PUB_PCS = "PCS";
pub const CONTACTLABEL_PUB_CELLULAR = "Cellular";
pub const CONTACTLABEL_PUB_CAR = "Car";
pub const CONTACTLABEL_PUB_PAGER = "Pager";
pub const CONTACTLABEL_PUB_TTY = "TTY";
pub const CONTACTLABEL_PUB_FAX = "Fax";
pub const CONTACTLABEL_PUB_VIDEO = "Video";
pub const CONTACTLABEL_PUB_MODEM = "Modem";
pub const CONTACTLABEL_PUB_BBS = "BBS";
pub const CONTACTLABEL_PUB_ISDN = "ISDN";
pub const CONTACTLABEL_PUB_AGENT = "Agent";
pub const CONTACTLABEL_PUB_DOMESTIC = "Domestic";
pub const CONTACTLABEL_PUB_INTERNATIONAL = "International";
pub const CONTACTLABEL_PUB_POSTAL = "Postal";
pub const CONTACTLABEL_PUB_PARCEL = "Parcel";
pub const CONTACTLABEL_PUB_USERTILE = "UserTile";
pub const CONTACTLABEL_PUB_LOGO = "Logo";
pub const CONTACTLABEL_WAB_SPOUSE = "wab:Spouse";
pub const CONTACTLABEL_WAB_CHILD = "wab:Child";
pub const CONTACTLABEL_WAB_MANAGER = "wab:Manager";
pub const CONTACTLABEL_WAB_ASSISTANT = "wab:Assistant";
pub const CONTACTLABEL_WAB_BIRTHDAY = "wab:Birthday";
pub const CONTACTLABEL_WAB_ANNIVERSARY = "wab:Anniversary";
pub const CONTACTLABEL_WAB_SOCIALNETWORK = "wab:SocialNetwork";
pub const CONTACTLABEL_WAB_SCHOOL = "wab:School";
pub const CONTACTLABEL_WAB_WISHLIST = "wab:WishList";

//--------------------------------------------------------------------------------
// Section: Types (21)
//--------------------------------------------------------------------------------
const CLSID_Contact_Value = Guid.initString("61b68808-8eee-4fd1-acb8-3d804c8db056");
pub const CLSID_Contact = &CLSID_Contact_Value;

const CLSID_ContactManager_Value = Guid.initString("7165c8ab-af88-42bd-86fd-5310b4285a02");
pub const CLSID_ContactManager = &CLSID_ContactManager_Value;

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContactManager_Value = Guid.initString("ad553d98-deb1-474a-8e17-fc0c2075b738");
pub const IID_IContactManager = &IID_IContactManager_Value;
pub const IContactManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Initialize: *const fn(
            self: *const IContactManager,
            pszAppName: ?[*:0]const u16,
            pszAppVersion: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Load: *const fn(
            self: *const IContactManager,
            pszContactID: ?[*:0]const u16,
            ppContact: ?*?*IContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MergeContactIDs: *const fn(
            self: *const IContactManager,
            pszNewContactID: ?[*:0]const u16,
            pszOldContactID: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetMeContact: *const fn(
            self: *const IContactManager,
            ppMeContact: ?*?*IContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetMeContact: *const fn(
            self: *const IContactManager,
            pMeContact: ?*IContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetContactCollection: *const fn(
            self: *const IContactManager,
            ppContactCollection: ?*?*IContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManager_Initialize(self: *const T, pszAppName: ?[*:0]const u16, pszAppVersion: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactManager.VTable, @ptrCast(self.vtable)).Initialize(@as(*const IContactManager, @ptrCast(self)), pszAppName, pszAppVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManager_Load(self: *const T, pszContactID: ?[*:0]const u16, ppContact: ?*?*IContact) callconv(.Inline) HRESULT {
            return @as(*const IContactManager.VTable, @ptrCast(self.vtable)).Load(@as(*const IContactManager, @ptrCast(self)), pszContactID, ppContact);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManager_MergeContactIDs(self: *const T, pszNewContactID: ?[*:0]const u16, pszOldContactID: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactManager.VTable, @ptrCast(self.vtable)).MergeContactIDs(@as(*const IContactManager, @ptrCast(self)), pszNewContactID, pszOldContactID);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManager_GetMeContact(self: *const T, ppMeContact: ?*?*IContact) callconv(.Inline) HRESULT {
            return @as(*const IContactManager.VTable, @ptrCast(self.vtable)).GetMeContact(@as(*const IContactManager, @ptrCast(self)), ppMeContact);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManager_SetMeContact(self: *const T, pMeContact: ?*IContact) callconv(.Inline) HRESULT {
            return @as(*const IContactManager.VTable, @ptrCast(self.vtable)).SetMeContact(@as(*const IContactManager, @ptrCast(self)), pMeContact);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactManager_GetContactCollection(self: *const T, ppContactCollection: ?*?*IContactCollection) callconv(.Inline) HRESULT {
            return @as(*const IContactManager.VTable, @ptrCast(self.vtable)).GetContactCollection(@as(*const IContactManager, @ptrCast(self)), ppContactCollection);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn Initialize(self: *const IContactManager, pszAppName: ?[*:0]const u16, pszAppVersion: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Initialize(self, pszAppName, pszAppVersion);
    }
    pub fn Load(self: *const IContactManager, pszContactID: ?[*:0]const u16, ppContact: ?*?*IContact) callconv(.Inline) HRESULT {
        return self.vtable.Load(self, pszContactID, ppContact);
    }
    pub fn MergeContactIDs(self: *const IContactManager, pszNewContactID: ?[*:0]const u16, pszOldContactID: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.MergeContactIDs(self, pszNewContactID, pszOldContactID);
    }
    pub fn GetMeContact(self: *const IContactManager, ppMeContact: ?*?*IContact) callconv(.Inline) HRESULT {
        return self.vtable.GetMeContact(self, ppMeContact);
    }
    pub fn SetMeContact(self: *const IContactManager, pMeContact: ?*IContact) callconv(.Inline) HRESULT {
        return self.vtable.SetMeContact(self, pMeContact);
    }
    pub fn GetContactCollection(self: *const IContactManager, ppContactCollection: ?*?*IContactCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetContactCollection(self, ppContactCollection);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContactCollection_Value = Guid.initString("b6afa338-d779-11d9-8bde-f66bad1e3f3a");
pub const IID_IContactCollection = &IID_IContactCollection_Value;
pub const IContactCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: *const fn(
            self: *const IContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn(
            self: *const IContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetCurrent: *const fn(
            self: *const IContactCollection,
            ppContact: ?*?*IContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactCollection_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactCollection.VTable, @ptrCast(self.vtable)).Reset(@as(*const IContactCollection, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactCollection_Next(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactCollection.VTable, @ptrCast(self.vtable)).Next(@as(*const IContactCollection, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactCollection_GetCurrent(self: *const T, ppContact: ?*?*IContact) callconv(.Inline) HRESULT {
            return @as(*const IContactCollection.VTable, @ptrCast(self.vtable)).GetCurrent(@as(*const IContactCollection, @ptrCast(self)), ppContact);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn Reset(self: *const IContactCollection) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Next(self: *const IContactCollection) callconv(.Inline) HRESULT {
        return self.vtable.Next(self);
    }
    pub fn GetCurrent(self: *const IContactCollection, ppContact: ?*?*IContact) callconv(.Inline) HRESULT {
        return self.vtable.GetCurrent(self, ppContact);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContactProperties_Value = Guid.initString("70dd27dd-5cbd-46e8-bef0-23b6b346288f");
pub const IID_IContactProperties = &IID_IContactProperties_Value;
pub const IContactProperties = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetString: *const fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
            pszValue: [*:0]u16,
            cchValue: u32,
            pdwcchPropertyValueRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetDate: *const fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
            pftDateTime: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetBinary: *const fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
            pszContentType: [*:0]u16,
            cchContentType: u32,
            pdwcchContentTypeRequired: ?*u32,
            ppStream: ?*?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetLabels: *const fn(
            self: *const IContactProperties,
            pszArrayElementName: ?[*:0]const u16,
            dwFlags: u32,
            pszLabels: [*:0]u16,
            cchLabels: u32,
            pdwcchLabelsRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetString: *const fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
            pszValue: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetDate: *const fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
            ftDateTime: FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetBinary: *const fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
            pszContentType: ?[*:0]const u16,
            pStream: ?*IStream,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        SetLabels: *const fn(
            self: *const IContactProperties,
            pszArrayElementName: ?[*:0]const u16,
            dwFlags: u32,
            dwLabelCount: u32,
            ppszLabels: [*]?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateArrayNode: *const fn(
            self: *const IContactProperties,
            pszArrayName: ?[*:0]const u16,
            dwFlags: u32,
            fAppend: BOOL,
            pszNewArrayElementName: [*:0]u16,
            cchNewArrayElementName: u32,
            pdwcchNewArrayElementNameRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteProperty: *const fn(
            self: *const IContactProperties,
            pszPropertyName: ?[*:0]const u16,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteArrayNode: *const fn(
            self: *const IContactProperties,
            pszArrayElementName: ?[*:0]const u16,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        DeleteLabels: *const fn(
            self: *const IContactProperties,
            pszArrayElementName: ?[*:0]const u16,
            dwFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyCollection: *const fn(
            self: *const IContactProperties,
            ppPropertyCollection: ?*?*IContactPropertyCollection,
            dwFlags: u32,
            pszMultiValueName: ?[*:0]const u16,
            dwLabelCount: u32,
            ppszLabels: [*]?PWSTR,
            fAnyLabelMatches: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_GetString(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pszValue: [*:0]u16, cchValue: u32, pdwcchPropertyValueRequired: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).GetString(@as(*const IContactProperties, @ptrCast(self)), pszPropertyName, dwFlags, pszValue, cchValue, pdwcchPropertyValueRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_GetDate(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pftDateTime: ?*FILETIME) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).GetDate(@as(*const IContactProperties, @ptrCast(self)), pszPropertyName, dwFlags, pftDateTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_GetBinary(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pszContentType: [*:0]u16, cchContentType: u32, pdwcchContentTypeRequired: ?*u32, ppStream: ?*?*IStream) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).GetBinary(@as(*const IContactProperties, @ptrCast(self)), pszPropertyName, dwFlags, pszContentType, cchContentType, pdwcchContentTypeRequired, ppStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_GetLabels(self: *const T, pszArrayElementName: ?[*:0]const u16, dwFlags: u32, pszLabels: [*:0]u16, cchLabels: u32, pdwcchLabelsRequired: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).GetLabels(@as(*const IContactProperties, @ptrCast(self)), pszArrayElementName, dwFlags, pszLabels, cchLabels, pdwcchLabelsRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_SetString(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pszValue: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).SetString(@as(*const IContactProperties, @ptrCast(self)), pszPropertyName, dwFlags, pszValue);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_SetDate(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32, ftDateTime: FILETIME) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).SetDate(@as(*const IContactProperties, @ptrCast(self)), pszPropertyName, dwFlags, ftDateTime);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_SetBinary(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pszContentType: ?[*:0]const u16, pStream: ?*IStream) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).SetBinary(@as(*const IContactProperties, @ptrCast(self)), pszPropertyName, dwFlags, pszContentType, pStream);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_SetLabels(self: *const T, pszArrayElementName: ?[*:0]const u16, dwFlags: u32, dwLabelCount: u32, ppszLabels: [*]?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).SetLabels(@as(*const IContactProperties, @ptrCast(self)), pszArrayElementName, dwFlags, dwLabelCount, ppszLabels);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_CreateArrayNode(self: *const T, pszArrayName: ?[*:0]const u16, dwFlags: u32, fAppend: BOOL, pszNewArrayElementName: [*:0]u16, cchNewArrayElementName: u32, pdwcchNewArrayElementNameRequired: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).CreateArrayNode(@as(*const IContactProperties, @ptrCast(self)), pszArrayName, dwFlags, fAppend, pszNewArrayElementName, cchNewArrayElementName, pdwcchNewArrayElementNameRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_DeleteProperty(self: *const T, pszPropertyName: ?[*:0]const u16, dwFlags: u32) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).DeleteProperty(@as(*const IContactProperties, @ptrCast(self)), pszPropertyName, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_DeleteArrayNode(self: *const T, pszArrayElementName: ?[*:0]const u16, dwFlags: u32) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).DeleteArrayNode(@as(*const IContactProperties, @ptrCast(self)), pszArrayElementName, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_DeleteLabels(self: *const T, pszArrayElementName: ?[*:0]const u16, dwFlags: u32) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).DeleteLabels(@as(*const IContactProperties, @ptrCast(self)), pszArrayElementName, dwFlags);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactProperties_GetPropertyCollection(self: *const T, ppPropertyCollection: ?*?*IContactPropertyCollection, dwFlags: u32, pszMultiValueName: ?[*:0]const u16, dwLabelCount: u32, ppszLabels: [*]?PWSTR, fAnyLabelMatches: BOOL) callconv(.Inline) HRESULT {
            return @as(*const IContactProperties.VTable, @ptrCast(self.vtable)).GetPropertyCollection(@as(*const IContactProperties, @ptrCast(self)), ppPropertyCollection, dwFlags, pszMultiValueName, dwLabelCount, ppszLabels, fAnyLabelMatches);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn GetString(self: *const IContactProperties, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pszValue: [*:0]u16, cchValue: u32, pdwcchPropertyValueRequired: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetString(self, pszPropertyName, dwFlags, pszValue, cchValue, pdwcchPropertyValueRequired);
    }
    pub fn GetDate(self: *const IContactProperties, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pftDateTime: ?*FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.GetDate(self, pszPropertyName, dwFlags, pftDateTime);
    }
    pub fn GetBinary(self: *const IContactProperties, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pszContentType: [*:0]u16, cchContentType: u32, pdwcchContentTypeRequired: ?*u32, ppStream: ?*?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.GetBinary(self, pszPropertyName, dwFlags, pszContentType, cchContentType, pdwcchContentTypeRequired, ppStream);
    }
    pub fn GetLabels(self: *const IContactProperties, pszArrayElementName: ?[*:0]const u16, dwFlags: u32, pszLabels: [*:0]u16, cchLabels: u32, pdwcchLabelsRequired: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetLabels(self, pszArrayElementName, dwFlags, pszLabels, cchLabels, pdwcchLabelsRequired);
    }
    pub fn SetString(self: *const IContactProperties, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pszValue: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.SetString(self, pszPropertyName, dwFlags, pszValue);
    }
    pub fn SetDate(self: *const IContactProperties, pszPropertyName: ?[*:0]const u16, dwFlags: u32, ftDateTime: FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.SetDate(self, pszPropertyName, dwFlags, ftDateTime);
    }
    pub fn SetBinary(self: *const IContactProperties, pszPropertyName: ?[*:0]const u16, dwFlags: u32, pszContentType: ?[*:0]const u16, pStream: ?*IStream) callconv(.Inline) HRESULT {
        return self.vtable.SetBinary(self, pszPropertyName, dwFlags, pszContentType, pStream);
    }
    pub fn SetLabels(self: *const IContactProperties, pszArrayElementName: ?[*:0]const u16, dwFlags: u32, dwLabelCount: u32, ppszLabels: [*]?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.SetLabels(self, pszArrayElementName, dwFlags, dwLabelCount, ppszLabels);
    }
    pub fn CreateArrayNode(self: *const IContactProperties, pszArrayName: ?[*:0]const u16, dwFlags: u32, fAppend: BOOL, pszNewArrayElementName: [*:0]u16, cchNewArrayElementName: u32, pdwcchNewArrayElementNameRequired: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.CreateArrayNode(self, pszArrayName, dwFlags, fAppend, pszNewArrayElementName, cchNewArrayElementName, pdwcchNewArrayElementNameRequired);
    }
    pub fn DeleteProperty(self: *const IContactProperties, pszPropertyName: ?[*:0]const u16, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.DeleteProperty(self, pszPropertyName, dwFlags);
    }
    pub fn DeleteArrayNode(self: *const IContactProperties, pszArrayElementName: ?[*:0]const u16, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.DeleteArrayNode(self, pszArrayElementName, dwFlags);
    }
    pub fn DeleteLabels(self: *const IContactProperties, pszArrayElementName: ?[*:0]const u16, dwFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.DeleteLabels(self, pszArrayElementName, dwFlags);
    }
    pub fn GetPropertyCollection(self: *const IContactProperties, ppPropertyCollection: ?*?*IContactPropertyCollection, dwFlags: u32, pszMultiValueName: ?[*:0]const u16, dwLabelCount: u32, ppszLabels: [*]?PWSTR, fAnyLabelMatches: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyCollection(self, ppPropertyCollection, dwFlags, pszMultiValueName, dwLabelCount, ppszLabels, fAnyLabelMatches);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContact_Value = Guid.initString("f941b671-bda7-4f77-884a-f46462f226a7");
pub const IID_IContact = &IID_IContact_Value;
pub const IContact = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetContactID: *const fn(
            self: *const IContact,
            pszContactID: [*:0]u16,
            cchContactID: u32,
            pdwcchContactIDRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPath: *const fn(
            self: *const IContact,
            pszPath: [*:0]u16,
            cchPath: u32,
            pdwcchPathRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CommitChanges: *const fn(
            self: *const IContact,
            dwCommitFlags: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContact_GetContactID(self: *const T, pszContactID: [*:0]u16, cchContactID: u32, pdwcchContactIDRequired: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContact.VTable, @ptrCast(self.vtable)).GetContactID(@as(*const IContact, @ptrCast(self)), pszContactID, cchContactID, pdwcchContactIDRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContact_GetPath(self: *const T, pszPath: [*:0]u16, cchPath: u32, pdwcchPathRequired: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContact.VTable, @ptrCast(self.vtable)).GetPath(@as(*const IContact, @ptrCast(self)), pszPath, cchPath, pdwcchPathRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContact_CommitChanges(self: *const T, dwCommitFlags: u32) callconv(.Inline) HRESULT {
            return @as(*const IContact.VTable, @ptrCast(self.vtable)).CommitChanges(@as(*const IContact, @ptrCast(self)), dwCommitFlags);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn GetContactID(self: *const IContact, pszContactID: [*:0]u16, cchContactID: u32, pdwcchContactIDRequired: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetContactID(self, pszContactID, cchContactID, pdwcchContactIDRequired);
    }
    pub fn GetPath(self: *const IContact, pszPath: [*:0]u16, cchPath: u32, pdwcchPathRequired: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPath(self, pszPath, cchPath, pdwcchPathRequired);
    }
    pub fn CommitChanges(self: *const IContact, dwCommitFlags: u32) callconv(.Inline) HRESULT {
        return self.vtable.CommitChanges(self, dwCommitFlags);
    }
};

// TODO: this type is limited to platform 'windows6.0.6000'
const IID_IContactPropertyCollection_Value = Guid.initString("ffd3adf8-fa64-4328-b1b6-2e0db509cb3c");
pub const IID_IContactPropertyCollection = &IID_IContactPropertyCollection_Value;
pub const IContactPropertyCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Reset: *const fn(
            self: *const IContactPropertyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Next: *const fn(
            self: *const IContactPropertyCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyName: *const fn(
            self: *const IContactPropertyCollection,
            pszPropertyName: [*:0]u16,
            cchPropertyName: u32,
            pdwcchPropertyNameRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyType: *const fn(
            self: *const IContactPropertyCollection,
            pdwType: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyVersion: *const fn(
            self: *const IContactPropertyCollection,
            pdwVersion: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyModificationDate: *const fn(
            self: *const IContactPropertyCollection,
            pftModificationDate: ?*FILETIME,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetPropertyArrayElementID: *const fn(
            self: *const IContactPropertyCollection,
            pszArrayElementID: [*:0]u16,
            cchArrayElementID: u32,
            pdwcchArrayElementIDRequired: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_Reset(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).Reset(@as(*const IContactPropertyCollection, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_Next(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).Next(@as(*const IContactPropertyCollection, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_GetPropertyName(self: *const T, pszPropertyName: [*:0]u16, cchPropertyName: u32, pdwcchPropertyNameRequired: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).GetPropertyName(@as(*const IContactPropertyCollection, @ptrCast(self)), pszPropertyName, cchPropertyName, pdwcchPropertyNameRequired);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_GetPropertyType(self: *const T, pdwType: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).GetPropertyType(@as(*const IContactPropertyCollection, @ptrCast(self)), pdwType);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_GetPropertyVersion(self: *const T, pdwVersion: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).GetPropertyVersion(@as(*const IContactPropertyCollection, @ptrCast(self)), pdwVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_GetPropertyModificationDate(self: *const T, pftModificationDate: ?*FILETIME) callconv(.Inline) HRESULT {
            return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).GetPropertyModificationDate(@as(*const IContactPropertyCollection, @ptrCast(self)), pftModificationDate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactPropertyCollection_GetPropertyArrayElementID(self: *const T, pszArrayElementID: [*:0]u16, cchArrayElementID: u32, pdwcchArrayElementIDRequired: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactPropertyCollection.VTable, @ptrCast(self.vtable)).GetPropertyArrayElementID(@as(*const IContactPropertyCollection, @ptrCast(self)), pszArrayElementID, cchArrayElementID, pdwcchArrayElementIDRequired);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn Reset(self: *const IContactPropertyCollection) callconv(.Inline) HRESULT {
        return self.vtable.Reset(self);
    }
    pub fn Next(self: *const IContactPropertyCollection) callconv(.Inline) HRESULT {
        return self.vtable.Next(self);
    }
    pub fn GetPropertyName(self: *const IContactPropertyCollection, pszPropertyName: [*:0]u16, cchPropertyName: u32, pdwcchPropertyNameRequired: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyName(self, pszPropertyName, cchPropertyName, pdwcchPropertyNameRequired);
    }
    pub fn GetPropertyType(self: *const IContactPropertyCollection, pdwType: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyType(self, pdwType);
    }
    pub fn GetPropertyVersion(self: *const IContactPropertyCollection, pdwVersion: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyVersion(self, pdwVersion);
    }
    pub fn GetPropertyModificationDate(self: *const IContactPropertyCollection, pftModificationDate: ?*FILETIME) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyModificationDate(self, pftModificationDate);
    }
    pub fn GetPropertyArrayElementID(self: *const IContactPropertyCollection, pszArrayElementID: [*:0]u16, cchArrayElementID: u32, pdwcchArrayElementIDRequired: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.GetPropertyArrayElementID(self, pszArrayElementID, cchArrayElementID, pdwcchArrayElementIDRequired);
    }
};

pub const CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS = enum(i32) {
    LOCAL = 0,
    EXTERNAL = 1,
};
pub const CA_CREATE_LOCAL = CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS.LOCAL;
pub const CA_CREATE_EXTERNAL = CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS.EXTERNAL;

pub const CONTACT_AGGREGATION_COLLECTION_OPTIONS = enum(i32) {
    DEFAULT = 0,
    INCLUDE_EXTERNAL = 1,
    EXTERNAL_ONLY = 2,
};
pub const CACO_DEFAULT = CONTACT_AGGREGATION_COLLECTION_OPTIONS.DEFAULT;
pub const CACO_INCLUDE_EXTERNAL = CONTACT_AGGREGATION_COLLECTION_OPTIONS.INCLUDE_EXTERNAL;
pub const CACO_EXTERNAL_ONLY = CONTACT_AGGREGATION_COLLECTION_OPTIONS.EXTERNAL_ONLY;

pub const CONTACT_AGGREGATION_BLOB = extern struct {
    dwCount: u32,
    lpb: ?*u8,
};

const IID_IContactAggregationManager_Value = Guid.initString("1d865989-4b1f-4b60-8f34-c2ad468b2b50");
pub const IID_IContactAggregationManager = &IID_IContactAggregationManager_Value;
pub const IContactAggregationManager = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        GetVersionInfo: *const fn(
            self: *const IContactAggregationManager,
            plMajorVersion: ?*i32,
            plMinorVersion: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateOrOpenGroup: *const fn(
            self: *const IContactAggregationManager,
            pGroupName: ?[*:0]const u16,
            options: CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS,
            pCreatedGroup: ?*BOOL,
            ppGroup: ?*?*IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateExternalContact: *const fn(
            self: *const IContactAggregationManager,
            ppItem: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateServerPerson: *const fn(
            self: *const IContactAggregationManager,
            ppServerPerson: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        CreateServerContactLink: *const fn(
            self: *const IContactAggregationManager,
            ppServerContactLink: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Flush: *const fn(
            self: *const IContactAggregationManager,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenAggregateContact: *const fn(
            self: *const IContactAggregationManager,
            pItemId: ?[*:0]const u16,
            ppItem: ?*?*IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenContact: *const fn(
            self: *const IContactAggregationManager,
            pItemId: ?[*:0]const u16,
            ppItem: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenServerContactLink: *const fn(
            self: *const IContactAggregationManager,
            pItemId: ?[*:0]const u16,
            ppItem: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        OpenServerPerson: *const fn(
            self: *const IContactAggregationManager,
            pItemId: ?[*:0]const u16,
            ppItem: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Contacts: *const fn(
            self: *const IContactAggregationManager,
            options: CONTACT_AGGREGATION_COLLECTION_OPTIONS,
            ppItems: ?*?*IContactAggregationContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_AggregateContacts: *const fn(
            self: *const IContactAggregationManager,
            options: CONTACT_AGGREGATION_COLLECTION_OPTIONS,
            ppAggregates: ?*?*IContactAggregationAggregateCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Groups: *const fn(
            self: *const IContactAggregationManager,
            options: CONTACT_AGGREGATION_COLLECTION_OPTIONS,
            ppGroups: ?*?*IContactAggregationGroupCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerPersons: *const fn(
            self: *const IContactAggregationManager,
            ppServerPersonCollection: ?*?*IContactAggregationServerPersonCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_ServerContactLinks: *const fn(
            self: *const IContactAggregationManager,
            pPersonItemId: ?[*:0]const u16,
            ppServerContactLinkCollection: ?*?*IContactAggregationLinkCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_GetVersionInfo(self: *const T, plMajorVersion: ?*i32, plMinorVersion: ?*i32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).GetVersionInfo(@as(*const IContactAggregationManager, @ptrCast(self)), plMajorVersion, plMinorVersion);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_CreateOrOpenGroup(self: *const T, pGroupName: ?[*:0]const u16, options: CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS, pCreatedGroup: ?*BOOL, ppGroup: ?*?*IContactAggregationGroup) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).CreateOrOpenGroup(@as(*const IContactAggregationManager, @ptrCast(self)), pGroupName, options, pCreatedGroup, ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_CreateExternalContact(self: *const T, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).CreateExternalContact(@as(*const IContactAggregationManager, @ptrCast(self)), ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_CreateServerPerson(self: *const T, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).CreateServerPerson(@as(*const IContactAggregationManager, @ptrCast(self)), ppServerPerson);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_CreateServerContactLink(self: *const T, ppServerContactLink: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).CreateServerContactLink(@as(*const IContactAggregationManager, @ptrCast(self)), ppServerContactLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_Flush(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).Flush(@as(*const IContactAggregationManager, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_OpenAggregateContact(self: *const T, pItemId: ?[*:0]const u16, ppItem: ?*?*IContactAggregationAggregate) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).OpenAggregateContact(@as(*const IContactAggregationManager, @ptrCast(self)), pItemId, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_OpenContact(self: *const T, pItemId: ?[*:0]const u16, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).OpenContact(@as(*const IContactAggregationManager, @ptrCast(self)), pItemId, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_OpenServerContactLink(self: *const T, pItemId: ?[*:0]const u16, ppItem: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).OpenServerContactLink(@as(*const IContactAggregationManager, @ptrCast(self)), pItemId, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_OpenServerPerson(self: *const T, pItemId: ?[*:0]const u16, ppItem: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).OpenServerPerson(@as(*const IContactAggregationManager, @ptrCast(self)), pItemId, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_get_Contacts(self: *const T, options: CONTACT_AGGREGATION_COLLECTION_OPTIONS, ppItems: ?*?*IContactAggregationContactCollection) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).get_Contacts(@as(*const IContactAggregationManager, @ptrCast(self)), options, ppItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_get_AggregateContacts(self: *const T, options: CONTACT_AGGREGATION_COLLECTION_OPTIONS, ppAggregates: ?*?*IContactAggregationAggregateCollection) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).get_AggregateContacts(@as(*const IContactAggregationManager, @ptrCast(self)), options, ppAggregates);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_get_Groups(self: *const T, options: CONTACT_AGGREGATION_COLLECTION_OPTIONS, ppGroups: ?*?*IContactAggregationGroupCollection) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).get_Groups(@as(*const IContactAggregationManager, @ptrCast(self)), options, ppGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_get_ServerPersons(self: *const T, ppServerPersonCollection: ?*?*IContactAggregationServerPersonCollection) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).get_ServerPersons(@as(*const IContactAggregationManager, @ptrCast(self)), ppServerPersonCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationManager_get_ServerContactLinks(self: *const T, pPersonItemId: ?[*:0]const u16, ppServerContactLinkCollection: ?*?*IContactAggregationLinkCollection) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationManager.VTable, @ptrCast(self.vtable)).get_ServerContactLinks(@as(*const IContactAggregationManager, @ptrCast(self)), pPersonItemId, ppServerContactLinkCollection);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn GetVersionInfo(self: *const IContactAggregationManager, plMajorVersion: ?*i32, plMinorVersion: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.GetVersionInfo(self, plMajorVersion, plMinorVersion);
    }
    pub fn CreateOrOpenGroup(self: *const IContactAggregationManager, pGroupName: ?[*:0]const u16, options: CONTACT_AGGREGATION_CREATE_OR_OPEN_OPTIONS, pCreatedGroup: ?*BOOL, ppGroup: ?*?*IContactAggregationGroup) callconv(.Inline) HRESULT {
        return self.vtable.CreateOrOpenGroup(self, pGroupName, options, pCreatedGroup, ppGroup);
    }
    pub fn CreateExternalContact(self: *const IContactAggregationManager, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
        return self.vtable.CreateExternalContact(self, ppItem);
    }
    pub fn CreateServerPerson(self: *const IContactAggregationManager, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
        return self.vtable.CreateServerPerson(self, ppServerPerson);
    }
    pub fn CreateServerContactLink(self: *const IContactAggregationManager, ppServerContactLink: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
        return self.vtable.CreateServerContactLink(self, ppServerContactLink);
    }
    pub fn Flush(self: *const IContactAggregationManager) callconv(.Inline) HRESULT {
        return self.vtable.Flush(self);
    }
    pub fn OpenAggregateContact(self: *const IContactAggregationManager, pItemId: ?[*:0]const u16, ppItem: ?*?*IContactAggregationAggregate) callconv(.Inline) HRESULT {
        return self.vtable.OpenAggregateContact(self, pItemId, ppItem);
    }
    pub fn OpenContact(self: *const IContactAggregationManager, pItemId: ?[*:0]const u16, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
        return self.vtable.OpenContact(self, pItemId, ppItem);
    }
    pub fn OpenServerContactLink(self: *const IContactAggregationManager, pItemId: ?[*:0]const u16, ppItem: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
        return self.vtable.OpenServerContactLink(self, pItemId, ppItem);
    }
    pub fn OpenServerPerson(self: *const IContactAggregationManager, pItemId: ?[*:0]const u16, ppItem: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
        return self.vtable.OpenServerPerson(self, pItemId, ppItem);
    }
    pub fn get_Contacts(self: *const IContactAggregationManager, options: CONTACT_AGGREGATION_COLLECTION_OPTIONS, ppItems: ?*?*IContactAggregationContactCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_Contacts(self, options, ppItems);
    }
    pub fn get_AggregateContacts(self: *const IContactAggregationManager, options: CONTACT_AGGREGATION_COLLECTION_OPTIONS, ppAggregates: ?*?*IContactAggregationAggregateCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_AggregateContacts(self, options, ppAggregates);
    }
    pub fn get_Groups(self: *const IContactAggregationManager, options: CONTACT_AGGREGATION_COLLECTION_OPTIONS, ppGroups: ?*?*IContactAggregationGroupCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_Groups(self, options, ppGroups);
    }
    pub fn get_ServerPersons(self: *const IContactAggregationManager, ppServerPersonCollection: ?*?*IContactAggregationServerPersonCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_ServerPersons(self, ppServerPersonCollection);
    }
    pub fn get_ServerContactLinks(self: *const IContactAggregationManager, pPersonItemId: ?[*:0]const u16, ppServerContactLinkCollection: ?*?*IContactAggregationLinkCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_ServerContactLinks(self, pPersonItemId, ppServerContactLinkCollection);
    }
};

const IID_IContactAggregationContact_Value = Guid.initString("1eb22e86-4c86-41f0-9f9f-c251e9fda6c3");
pub const IID_IContactAggregationContact = &IID_IContactAggregationContact_Value;
pub const IContactAggregationContact = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Delete: *const fn(
            self: *const IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn(
            self: *const IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        MoveToAggregate: *const fn(
            self: *const IContactAggregationContact,
            pAggregateId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Unlink: *const fn(
            self: *const IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AccountId: *const fn(
            self: *const IContactAggregationContact,
            ppAccountId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AccountId: *const fn(
            self: *const IContactAggregationContact,
            pAccountId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AggregateId: *const fn(
            self: *const IContactAggregationContact,
            ppAggregateId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const IContactAggregationContact,
            ppItemId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsMe: *const fn(
            self: *const IContactAggregationContact,
            pIsMe: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsExternal: *const fn(
            self: *const IContactAggregationContact,
            pIsExternal: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkSourceId: *const fn(
            self: *const IContactAggregationContact,
            pNetworkSourceId: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetworkSourceId: *const fn(
            self: *const IContactAggregationContact,
            networkSourceId: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkSourceIdString: *const fn(
            self: *const IContactAggregationContact,
            ppNetworkSourceId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetworkSourceIdString: *const fn(
            self: *const IContactAggregationContact,
            pNetworkSourceId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteObjectId: *const fn(
            self: *const IContactAggregationContact,
            ppRemoteObjectId: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteObjectId: *const fn(
            self: *const IContactAggregationContact,
            pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SyncIdentityHash: *const fn(
            self: *const IContactAggregationContact,
            ppSyncIdentityHash: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SyncIdentityHash: *const fn(
            self: *const IContactAggregationContact,
            pSyncIdentityHash: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).Delete(@as(*const IContactAggregationContact, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_Save(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).Save(@as(*const IContactAggregationContact, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_MoveToAggregate(self: *const T, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).MoveToAggregate(@as(*const IContactAggregationContact, @ptrCast(self)), pAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_Unlink(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).Unlink(@as(*const IContactAggregationContact, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_AccountId(self: *const T, ppAccountId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_AccountId(@as(*const IContactAggregationContact, @ptrCast(self)), ppAccountId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_put_AccountId(self: *const T, pAccountId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).put_AccountId(@as(*const IContactAggregationContact, @ptrCast(self)), pAccountId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_AggregateId(self: *const T, ppAggregateId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_AggregateId(@as(*const IContactAggregationContact, @ptrCast(self)), ppAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_Id(self: *const T, ppItemId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IContactAggregationContact, @ptrCast(self)), ppItemId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_IsMe(self: *const T, pIsMe: ?*BOOL) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_IsMe(@as(*const IContactAggregationContact, @ptrCast(self)), pIsMe);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_IsExternal(self: *const T, pIsExternal: ?*BOOL) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_IsExternal(@as(*const IContactAggregationContact, @ptrCast(self)), pIsExternal);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_NetworkSourceId(self: *const T, pNetworkSourceId: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_NetworkSourceId(@as(*const IContactAggregationContact, @ptrCast(self)), pNetworkSourceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_put_NetworkSourceId(self: *const T, networkSourceId: u32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).put_NetworkSourceId(@as(*const IContactAggregationContact, @ptrCast(self)), networkSourceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_NetworkSourceIdString(self: *const T, ppNetworkSourceId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_NetworkSourceIdString(@as(*const IContactAggregationContact, @ptrCast(self)), ppNetworkSourceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_put_NetworkSourceIdString(self: *const T, pNetworkSourceId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).put_NetworkSourceIdString(@as(*const IContactAggregationContact, @ptrCast(self)), pNetworkSourceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_RemoteObjectId(self: *const T, ppRemoteObjectId: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_RemoteObjectId(@as(*const IContactAggregationContact, @ptrCast(self)), ppRemoteObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_put_RemoteObjectId(self: *const T, pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).put_RemoteObjectId(@as(*const IContactAggregationContact, @ptrCast(self)), pRemoteObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_get_SyncIdentityHash(self: *const T, ppSyncIdentityHash: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).get_SyncIdentityHash(@as(*const IContactAggregationContact, @ptrCast(self)), ppSyncIdentityHash);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContact_put_SyncIdentityHash(self: *const T, pSyncIdentityHash: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContact.VTable, @ptrCast(self.vtable)).put_SyncIdentityHash(@as(*const IContactAggregationContact, @ptrCast(self)), pSyncIdentityHash);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn Delete(self: *const IContactAggregationContact) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
    pub fn Save(self: *const IContactAggregationContact) callconv(.Inline) HRESULT {
        return self.vtable.Save(self);
    }
    pub fn MoveToAggregate(self: *const IContactAggregationContact, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.MoveToAggregate(self, pAggregateId);
    }
    pub fn Unlink(self: *const IContactAggregationContact) callconv(.Inline) HRESULT {
        return self.vtable.Unlink(self);
    }
    pub fn get_AccountId(self: *const IContactAggregationContact, ppAccountId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AccountId(self, ppAccountId);
    }
    pub fn put_AccountId(self: *const IContactAggregationContact, pAccountId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_AccountId(self, pAccountId);
    }
    pub fn get_AggregateId(self: *const IContactAggregationContact, ppAggregateId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AggregateId(self, ppAggregateId);
    }
    pub fn get_Id(self: *const IContactAggregationContact, ppItemId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, ppItemId);
    }
    pub fn get_IsMe(self: *const IContactAggregationContact, pIsMe: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_IsMe(self, pIsMe);
    }
    pub fn get_IsExternal(self: *const IContactAggregationContact, pIsExternal: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_IsExternal(self, pIsExternal);
    }
    pub fn get_NetworkSourceId(self: *const IContactAggregationContact, pNetworkSourceId: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_NetworkSourceId(self, pNetworkSourceId);
    }
    pub fn put_NetworkSourceId(self: *const IContactAggregationContact, networkSourceId: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_NetworkSourceId(self, networkSourceId);
    }
    pub fn get_NetworkSourceIdString(self: *const IContactAggregationContact, ppNetworkSourceId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_NetworkSourceIdString(self, ppNetworkSourceId);
    }
    pub fn put_NetworkSourceIdString(self: *const IContactAggregationContact, pNetworkSourceId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_NetworkSourceIdString(self, pNetworkSourceId);
    }
    pub fn get_RemoteObjectId(self: *const IContactAggregationContact, ppRemoteObjectId: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.get_RemoteObjectId(self, ppRemoteObjectId);
    }
    pub fn put_RemoteObjectId(self: *const IContactAggregationContact, pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.put_RemoteObjectId(self, pRemoteObjectId);
    }
    pub fn get_SyncIdentityHash(self: *const IContactAggregationContact, ppSyncIdentityHash: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.get_SyncIdentityHash(self, ppSyncIdentityHash);
    }
    pub fn put_SyncIdentityHash(self: *const IContactAggregationContact, pSyncIdentityHash: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.put_SyncIdentityHash(self, pSyncIdentityHash);
    }
};

const IID_IContactAggregationContactCollection_Value = Guid.initString("826e66fa-81de-43ca-a6fb-8c785cd996c6");
pub const IID_IContactAggregationContactCollection = &IID_IContactAggregationContactCollection_Value;
pub const IContactAggregationContactCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: *const fn(
            self: *const IContactAggregationContactCollection,
            ppItem: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: *const fn(
            self: *const IContactAggregationContactCollection,
            ppItem: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByIdentityHash: *const fn(
            self: *const IContactAggregationContactCollection,
            pSourceType: ?[*:0]const u16,
            pAccountId: ?[*:0]const u16,
            pIdentityHash: ?*const CONTACT_AGGREGATION_BLOB,
            ppItem: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IContactAggregationContactCollection,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByRemoteId: *const fn(
            self: *const IContactAggregationContactCollection,
            pSourceType: ?[*:0]const u16,
            pAccountId: ?[*:0]const u16,
            pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB,
            ppItem: ?*?*IContactAggregationContact,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContactCollection_FindFirst(self: *const T, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContactCollection.VTable, @ptrCast(self.vtable)).FindFirst(@as(*const IContactAggregationContactCollection, @ptrCast(self)), ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContactCollection_FindNext(self: *const T, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContactCollection.VTable, @ptrCast(self.vtable)).FindNext(@as(*const IContactAggregationContactCollection, @ptrCast(self)), ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContactCollection_FindFirstByIdentityHash(self: *const T, pSourceType: ?[*:0]const u16, pAccountId: ?[*:0]const u16, pIdentityHash: ?*const CONTACT_AGGREGATION_BLOB, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContactCollection.VTable, @ptrCast(self.vtable)).FindFirstByIdentityHash(@as(*const IContactAggregationContactCollection, @ptrCast(self)), pSourceType, pAccountId, pIdentityHash, ppItem);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContactCollection_get_Count(self: *const T, pCount: ?*i32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContactCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IContactAggregationContactCollection, @ptrCast(self)), pCount);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationContactCollection_FindFirstByRemoteId(self: *const T, pSourceType: ?[*:0]const u16, pAccountId: ?[*:0]const u16, pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationContactCollection.VTable, @ptrCast(self.vtable)).FindFirstByRemoteId(@as(*const IContactAggregationContactCollection, @ptrCast(self)), pSourceType, pAccountId, pRemoteObjectId, ppItem);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn FindFirst(self: *const IContactAggregationContactCollection, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
        return self.vtable.FindFirst(self, ppItem);
    }
    pub fn FindNext(self: *const IContactAggregationContactCollection, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
        return self.vtable.FindNext(self, ppItem);
    }
    pub fn FindFirstByIdentityHash(self: *const IContactAggregationContactCollection, pSourceType: ?[*:0]const u16, pAccountId: ?[*:0]const u16, pIdentityHash: ?*const CONTACT_AGGREGATION_BLOB, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
        return self.vtable.FindFirstByIdentityHash(self, pSourceType, pAccountId, pIdentityHash, ppItem);
    }
    pub fn get_Count(self: *const IContactAggregationContactCollection, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
    pub fn FindFirstByRemoteId(self: *const IContactAggregationContactCollection, pSourceType: ?[*:0]const u16, pAccountId: ?[*:0]const u16, pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB, ppItem: ?*?*IContactAggregationContact) callconv(.Inline) HRESULT {
        return self.vtable.FindFirstByRemoteId(self, pSourceType, pAccountId, pRemoteObjectId, ppItem);
    }
};

const IID_IContactAggregationAggregate_Value = Guid.initString("7ed1c814-cd30-43c8-9b8d-2e489e53d54b");
pub const IID_IContactAggregationAggregate = &IID_IContactAggregationAggregate_Value;
pub const IContactAggregationAggregate = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Save: *const fn(
            self: *const IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        GetComponentItems: *const fn(
            self: *const IContactAggregationAggregate,
            pComponentItems: ?*?*IContactAggregationContactCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Link: *const fn(
            self: *const IContactAggregationAggregate,
            pAggregateId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        get_Groups: *const fn(
            self: *const IContactAggregationAggregate,
            options: CONTACT_AGGREGATION_COLLECTION_OPTIONS,
            ppGroups: ?*?*IContactAggregationGroupCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntiLink: *const fn(
            self: *const IContactAggregationAggregate,
            ppAntiLink: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AntiLink: *const fn(
            self: *const IContactAggregationAggregate,
            pAntiLink: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FavoriteOrder: *const fn(
            self: *const IContactAggregationAggregate,
            pFavoriteOrder: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FavoriteOrder: *const fn(
            self: *const IContactAggregationAggregate,
            favoriteOrder: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const IContactAggregationAggregate,
            ppItemId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_Save(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).Save(@as(*const IContactAggregationAggregate, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_GetComponentItems(self: *const T, pComponentItems: ?*?*IContactAggregationContactCollection) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).GetComponentItems(@as(*const IContactAggregationAggregate, @ptrCast(self)), pComponentItems);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_Link(self: *const T, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).Link(@as(*const IContactAggregationAggregate, @ptrCast(self)), pAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_get_Groups(self: *const T, options: CONTACT_AGGREGATION_COLLECTION_OPTIONS, ppGroups: ?*?*IContactAggregationGroupCollection) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).get_Groups(@as(*const IContactAggregationAggregate, @ptrCast(self)), options, ppGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_get_AntiLink(self: *const T, ppAntiLink: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).get_AntiLink(@as(*const IContactAggregationAggregate, @ptrCast(self)), ppAntiLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_put_AntiLink(self: *const T, pAntiLink: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).put_AntiLink(@as(*const IContactAggregationAggregate, @ptrCast(self)), pAntiLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_get_FavoriteOrder(self: *const T, pFavoriteOrder: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).get_FavoriteOrder(@as(*const IContactAggregationAggregate, @ptrCast(self)), pFavoriteOrder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_put_FavoriteOrder(self: *const T, favoriteOrder: u32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).put_FavoriteOrder(@as(*const IContactAggregationAggregate, @ptrCast(self)), favoriteOrder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregate_get_Id(self: *const T, ppItemId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregate.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IContactAggregationAggregate, @ptrCast(self)), ppItemId);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn Save(self: *const IContactAggregationAggregate) callconv(.Inline) HRESULT {
        return self.vtable.Save(self);
    }
    pub fn GetComponentItems(self: *const IContactAggregationAggregate, pComponentItems: ?*?*IContactAggregationContactCollection) callconv(.Inline) HRESULT {
        return self.vtable.GetComponentItems(self, pComponentItems);
    }
    pub fn Link(self: *const IContactAggregationAggregate, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Link(self, pAggregateId);
    }
    pub fn get_Groups(self: *const IContactAggregationAggregate, options: CONTACT_AGGREGATION_COLLECTION_OPTIONS, ppGroups: ?*?*IContactAggregationGroupCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_Groups(self, options, ppGroups);
    }
    pub fn get_AntiLink(self: *const IContactAggregationAggregate, ppAntiLink: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AntiLink(self, ppAntiLink);
    }
    pub fn put_AntiLink(self: *const IContactAggregationAggregate, pAntiLink: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_AntiLink(self, pAntiLink);
    }
    pub fn get_FavoriteOrder(self: *const IContactAggregationAggregate, pFavoriteOrder: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_FavoriteOrder(self, pFavoriteOrder);
    }
    pub fn put_FavoriteOrder(self: *const IContactAggregationAggregate, favoriteOrder: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_FavoriteOrder(self, favoriteOrder);
    }
    pub fn get_Id(self: *const IContactAggregationAggregate, ppItemId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, ppItemId);
    }
};

const IID_IContactAggregationAggregateCollection_Value = Guid.initString("2359f3a6-3a68-40af-98db-0f9eb143c3bb");
pub const IID_IContactAggregationAggregateCollection = &IID_IContactAggregationAggregateCollection_Value;
pub const IContactAggregationAggregateCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: *const fn(
            self: *const IContactAggregationAggregateCollection,
            ppAggregate: ?*?*IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByAntiLinkId: *const fn(
            self: *const IContactAggregationAggregateCollection,
            pAntiLinkId: ?[*:0]const u16,
            ppAggregate: ?*?*IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: *const fn(
            self: *const IContactAggregationAggregateCollection,
            ppAggregate: ?*?*IContactAggregationAggregate,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IContactAggregationAggregateCollection,
            pCount: ?*i32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregateCollection_FindFirst(self: *const T, ppAggregate: ?*?*IContactAggregationAggregate) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregateCollection.VTable, @ptrCast(self.vtable)).FindFirst(@as(*const IContactAggregationAggregateCollection, @ptrCast(self)), ppAggregate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregateCollection_FindFirstByAntiLinkId(self: *const T, pAntiLinkId: ?[*:0]const u16, ppAggregate: ?*?*IContactAggregationAggregate) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregateCollection.VTable, @ptrCast(self.vtable)).FindFirstByAntiLinkId(@as(*const IContactAggregationAggregateCollection, @ptrCast(self)), pAntiLinkId, ppAggregate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregateCollection_FindNext(self: *const T, ppAggregate: ?*?*IContactAggregationAggregate) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregateCollection.VTable, @ptrCast(self.vtable)).FindNext(@as(*const IContactAggregationAggregateCollection, @ptrCast(self)), ppAggregate);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationAggregateCollection_get_Count(self: *const T, pCount: ?*i32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationAggregateCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IContactAggregationAggregateCollection, @ptrCast(self)), pCount);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn FindFirst(self: *const IContactAggregationAggregateCollection, ppAggregate: ?*?*IContactAggregationAggregate) callconv(.Inline) HRESULT {
        return self.vtable.FindFirst(self, ppAggregate);
    }
    pub fn FindFirstByAntiLinkId(self: *const IContactAggregationAggregateCollection, pAntiLinkId: ?[*:0]const u16, ppAggregate: ?*?*IContactAggregationAggregate) callconv(.Inline) HRESULT {
        return self.vtable.FindFirstByAntiLinkId(self, pAntiLinkId, ppAggregate);
    }
    pub fn FindNext(self: *const IContactAggregationAggregateCollection, ppAggregate: ?*?*IContactAggregationAggregate) callconv(.Inline) HRESULT {
        return self.vtable.FindNext(self, ppAggregate);
    }
    pub fn get_Count(self: *const IContactAggregationAggregateCollection, pCount: ?*i32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
};

const IID_IContactAggregationGroup_Value = Guid.initString("c93c545f-1284-499b-96af-07372af473e0");
pub const IID_IContactAggregationGroup = &IID_IContactAggregationGroup_Value;
pub const IContactAggregationGroup = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Delete: *const fn(
            self: *const IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn(
            self: *const IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Add: *const fn(
            self: *const IContactAggregationGroup,
            pAggregateId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Remove: *const fn(
            self: *const IContactAggregationGroup,
            pAggregateId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Members: *const fn(
            self: *const IContactAggregationGroup,
            ppAggregateContactCollection: ?*?*IContactAggregationAggregateCollection,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GlobalObjectId: *const fn(
            self: *const IContactAggregationGroup,
            pGlobalObjectId: ?*Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GlobalObjectId: *const fn(
            self: *const IContactAggregationGroup,
            pGlobalObjectId: ?*const Guid,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const IContactAggregationGroup,
            ppItemId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Name: *const fn(
            self: *const IContactAggregationGroup,
            ppName: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Name: *const fn(
            self: *const IContactAggregationGroup,
            pName: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).Delete(@as(*const IContactAggregationGroup, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_Save(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).Save(@as(*const IContactAggregationGroup, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_Add(self: *const T, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).Add(@as(*const IContactAggregationGroup, @ptrCast(self)), pAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_Remove(self: *const T, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).Remove(@as(*const IContactAggregationGroup, @ptrCast(self)), pAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_get_Members(self: *const T, ppAggregateContactCollection: ?*?*IContactAggregationAggregateCollection) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).get_Members(@as(*const IContactAggregationGroup, @ptrCast(self)), ppAggregateContactCollection);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_get_GlobalObjectId(self: *const T, pGlobalObjectId: ?*Guid) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).get_GlobalObjectId(@as(*const IContactAggregationGroup, @ptrCast(self)), pGlobalObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_put_GlobalObjectId(self: *const T, pGlobalObjectId: ?*const Guid) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).put_GlobalObjectId(@as(*const IContactAggregationGroup, @ptrCast(self)), pGlobalObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_get_Id(self: *const T, ppItemId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IContactAggregationGroup, @ptrCast(self)), ppItemId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_get_Name(self: *const T, ppName: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).get_Name(@as(*const IContactAggregationGroup, @ptrCast(self)), ppName);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroup_put_Name(self: *const T, pName: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroup.VTable, @ptrCast(self.vtable)).put_Name(@as(*const IContactAggregationGroup, @ptrCast(self)), pName);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn Delete(self: *const IContactAggregationGroup) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
    pub fn Save(self: *const IContactAggregationGroup) callconv(.Inline) HRESULT {
        return self.vtable.Save(self);
    }
    pub fn Add(self: *const IContactAggregationGroup, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Add(self, pAggregateId);
    }
    pub fn Remove(self: *const IContactAggregationGroup, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.Remove(self, pAggregateId);
    }
    pub fn get_Members(self: *const IContactAggregationGroup, ppAggregateContactCollection: ?*?*IContactAggregationAggregateCollection) callconv(.Inline) HRESULT {
        return self.vtable.get_Members(self, ppAggregateContactCollection);
    }
    pub fn get_GlobalObjectId(self: *const IContactAggregationGroup, pGlobalObjectId: ?*Guid) callconv(.Inline) HRESULT {
        return self.vtable.get_GlobalObjectId(self, pGlobalObjectId);
    }
    pub fn put_GlobalObjectId(self: *const IContactAggregationGroup, pGlobalObjectId: ?*const Guid) callconv(.Inline) HRESULT {
        return self.vtable.put_GlobalObjectId(self, pGlobalObjectId);
    }
    pub fn get_Id(self: *const IContactAggregationGroup, ppItemId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, ppItemId);
    }
    pub fn get_Name(self: *const IContactAggregationGroup, ppName: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Name(self, ppName);
    }
    pub fn put_Name(self: *const IContactAggregationGroup, pName: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_Name(self, pName);
    }
};

const IID_IContactAggregationGroupCollection_Value = Guid.initString("20a19a9c-d2f3-4b83-9143-beffd2cc226d");
pub const IID_IContactAggregationGroupCollection = &IID_IContactAggregationGroupCollection_Value;
pub const IContactAggregationGroupCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: *const fn(
            self: *const IContactAggregationGroupCollection,
            ppGroup: ?*?*IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByGlobalObjectId: *const fn(
            self: *const IContactAggregationGroupCollection,
            pGlobalObjectId: ?*const Guid,
            ppGroup: ?*?*IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: *const fn(
            self: *const IContactAggregationGroupCollection,
            ppGroup: ?*?*IContactAggregationGroup,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IContactAggregationGroupCollection,
            pCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroupCollection_FindFirst(self: *const T, ppGroup: ?*?*IContactAggregationGroup) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroupCollection.VTable, @ptrCast(self.vtable)).FindFirst(@as(*const IContactAggregationGroupCollection, @ptrCast(self)), ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroupCollection_FindFirstByGlobalObjectId(self: *const T, pGlobalObjectId: ?*const Guid, ppGroup: ?*?*IContactAggregationGroup) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroupCollection.VTable, @ptrCast(self.vtable)).FindFirstByGlobalObjectId(@as(*const IContactAggregationGroupCollection, @ptrCast(self)), pGlobalObjectId, ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroupCollection_FindNext(self: *const T, ppGroup: ?*?*IContactAggregationGroup) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroupCollection.VTable, @ptrCast(self.vtable)).FindNext(@as(*const IContactAggregationGroupCollection, @ptrCast(self)), ppGroup);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationGroupCollection_get_Count(self: *const T, pCount: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationGroupCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IContactAggregationGroupCollection, @ptrCast(self)), pCount);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn FindFirst(self: *const IContactAggregationGroupCollection, ppGroup: ?*?*IContactAggregationGroup) callconv(.Inline) HRESULT {
        return self.vtable.FindFirst(self, ppGroup);
    }
    pub fn FindFirstByGlobalObjectId(self: *const IContactAggregationGroupCollection, pGlobalObjectId: ?*const Guid, ppGroup: ?*?*IContactAggregationGroup) callconv(.Inline) HRESULT {
        return self.vtable.FindFirstByGlobalObjectId(self, pGlobalObjectId, ppGroup);
    }
    pub fn FindNext(self: *const IContactAggregationGroupCollection, ppGroup: ?*?*IContactAggregationGroup) callconv(.Inline) HRESULT {
        return self.vtable.FindNext(self, ppGroup);
    }
    pub fn get_Count(self: *const IContactAggregationGroupCollection, pCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
};

const IID_IContactAggregationLink_Value = Guid.initString("b6813323-a183-4654-8627-79b30de3a0ec");
pub const IID_IContactAggregationLink = &IID_IContactAggregationLink_Value;
pub const IContactAggregationLink = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Delete: *const fn(
            self: *const IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn(
            self: *const IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AccountId: *const fn(
            self: *const IContactAggregationLink,
            ppAccountId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AccountId: *const fn(
            self: *const IContactAggregationLink,
            pAccountId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const IContactAggregationLink,
            ppItemId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsLinkResolved: *const fn(
            self: *const IContactAggregationLink,
            pIsLinkResolved: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsLinkResolved: *const fn(
            self: *const IContactAggregationLink,
            isLinkResolved: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_NetworkSourceIdString: *const fn(
            self: *const IContactAggregationLink,
            ppNetworkSourceId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_NetworkSourceIdString: *const fn(
            self: *const IContactAggregationLink,
            pNetworkSourceId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_RemoteObjectId: *const fn(
            self: *const IContactAggregationLink,
            ppRemoteObjectId: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_RemoteObjectId: *const fn(
            self: *const IContactAggregationLink,
            pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerPerson: *const fn(
            self: *const IContactAggregationLink,
            ppServerPersonId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServerPerson: *const fn(
            self: *const IContactAggregationLink,
            pServerPersonId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ServerPersonBaseline: *const fn(
            self: *const IContactAggregationLink,
            ppServerPersonId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ServerPersonBaseline: *const fn(
            self: *const IContactAggregationLink,
            pServerPersonId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_SyncIdentityHash: *const fn(
            self: *const IContactAggregationLink,
            ppSyncIdentityHash: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_SyncIdentityHash: *const fn(
            self: *const IContactAggregationLink,
            pSyncIdentityHash: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).Delete(@as(*const IContactAggregationLink, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_Save(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).Save(@as(*const IContactAggregationLink, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_AccountId(self: *const T, ppAccountId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_AccountId(@as(*const IContactAggregationLink, @ptrCast(self)), ppAccountId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_AccountId(self: *const T, pAccountId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_AccountId(@as(*const IContactAggregationLink, @ptrCast(self)), pAccountId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_Id(self: *const T, ppItemId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IContactAggregationLink, @ptrCast(self)), ppItemId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_IsLinkResolved(self: *const T, pIsLinkResolved: ?*BOOL) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_IsLinkResolved(@as(*const IContactAggregationLink, @ptrCast(self)), pIsLinkResolved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_IsLinkResolved(self: *const T, isLinkResolved: BOOL) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_IsLinkResolved(@as(*const IContactAggregationLink, @ptrCast(self)), isLinkResolved);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_NetworkSourceIdString(self: *const T, ppNetworkSourceId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_NetworkSourceIdString(@as(*const IContactAggregationLink, @ptrCast(self)), ppNetworkSourceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_NetworkSourceIdString(self: *const T, pNetworkSourceId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_NetworkSourceIdString(@as(*const IContactAggregationLink, @ptrCast(self)), pNetworkSourceId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_RemoteObjectId(self: *const T, ppRemoteObjectId: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_RemoteObjectId(@as(*const IContactAggregationLink, @ptrCast(self)), ppRemoteObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_RemoteObjectId(self: *const T, pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_RemoteObjectId(@as(*const IContactAggregationLink, @ptrCast(self)), pRemoteObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_ServerPerson(self: *const T, ppServerPersonId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_ServerPerson(@as(*const IContactAggregationLink, @ptrCast(self)), ppServerPersonId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_ServerPerson(self: *const T, pServerPersonId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_ServerPerson(@as(*const IContactAggregationLink, @ptrCast(self)), pServerPersonId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_ServerPersonBaseline(self: *const T, ppServerPersonId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_ServerPersonBaseline(@as(*const IContactAggregationLink, @ptrCast(self)), ppServerPersonId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_ServerPersonBaseline(self: *const T, pServerPersonId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_ServerPersonBaseline(@as(*const IContactAggregationLink, @ptrCast(self)), pServerPersonId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_get_SyncIdentityHash(self: *const T, ppSyncIdentityHash: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).get_SyncIdentityHash(@as(*const IContactAggregationLink, @ptrCast(self)), ppSyncIdentityHash);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLink_put_SyncIdentityHash(self: *const T, pSyncIdentityHash: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLink.VTable, @ptrCast(self.vtable)).put_SyncIdentityHash(@as(*const IContactAggregationLink, @ptrCast(self)), pSyncIdentityHash);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn Delete(self: *const IContactAggregationLink) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
    pub fn Save(self: *const IContactAggregationLink) callconv(.Inline) HRESULT {
        return self.vtable.Save(self);
    }
    pub fn get_AccountId(self: *const IContactAggregationLink, ppAccountId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AccountId(self, ppAccountId);
    }
    pub fn put_AccountId(self: *const IContactAggregationLink, pAccountId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_AccountId(self, pAccountId);
    }
    pub fn get_Id(self: *const IContactAggregationLink, ppItemId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, ppItemId);
    }
    pub fn get_IsLinkResolved(self: *const IContactAggregationLink, pIsLinkResolved: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_IsLinkResolved(self, pIsLinkResolved);
    }
    pub fn put_IsLinkResolved(self: *const IContactAggregationLink, isLinkResolved: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_IsLinkResolved(self, isLinkResolved);
    }
    pub fn get_NetworkSourceIdString(self: *const IContactAggregationLink, ppNetworkSourceId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_NetworkSourceIdString(self, ppNetworkSourceId);
    }
    pub fn put_NetworkSourceIdString(self: *const IContactAggregationLink, pNetworkSourceId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_NetworkSourceIdString(self, pNetworkSourceId);
    }
    pub fn get_RemoteObjectId(self: *const IContactAggregationLink, ppRemoteObjectId: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.get_RemoteObjectId(self, ppRemoteObjectId);
    }
    pub fn put_RemoteObjectId(self: *const IContactAggregationLink, pRemoteObjectId: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.put_RemoteObjectId(self, pRemoteObjectId);
    }
    pub fn get_ServerPerson(self: *const IContactAggregationLink, ppServerPersonId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ServerPerson(self, ppServerPersonId);
    }
    pub fn put_ServerPerson(self: *const IContactAggregationLink, pServerPersonId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_ServerPerson(self, pServerPersonId);
    }
    pub fn get_ServerPersonBaseline(self: *const IContactAggregationLink, ppServerPersonId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ServerPersonBaseline(self, ppServerPersonId);
    }
    pub fn put_ServerPersonBaseline(self: *const IContactAggregationLink, pServerPersonId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_ServerPersonBaseline(self, pServerPersonId);
    }
    pub fn get_SyncIdentityHash(self: *const IContactAggregationLink, ppSyncIdentityHash: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.get_SyncIdentityHash(self, ppSyncIdentityHash);
    }
    pub fn put_SyncIdentityHash(self: *const IContactAggregationLink, pSyncIdentityHash: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.put_SyncIdentityHash(self, pSyncIdentityHash);
    }
};

const IID_IContactAggregationLinkCollection_Value = Guid.initString("f8bc0e93-fb55-4f28-b9fa-b1c274153292");
pub const IID_IContactAggregationLinkCollection = &IID_IContactAggregationLinkCollection_Value;
pub const IContactAggregationLinkCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: *const fn(
            self: *const IContactAggregationLinkCollection,
            ppServerContactLink: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByRemoteId: *const fn(
            self: *const IContactAggregationLinkCollection,
            pSourceType: ?[*:0]const u16,
            pAccountId: ?[*:0]const u16,
            pRemoteId: ?*const CONTACT_AGGREGATION_BLOB,
            ppServerContactLink: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: *const fn(
            self: *const IContactAggregationLinkCollection,
            ppServerContactLink: ?*?*IContactAggregationLink,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IContactAggregationLinkCollection,
            pCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLinkCollection_FindFirst(self: *const T, ppServerContactLink: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLinkCollection.VTable, @ptrCast(self.vtable)).FindFirst(@as(*const IContactAggregationLinkCollection, @ptrCast(self)), ppServerContactLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLinkCollection_FindFirstByRemoteId(self: *const T, pSourceType: ?[*:0]const u16, pAccountId: ?[*:0]const u16, pRemoteId: ?*const CONTACT_AGGREGATION_BLOB, ppServerContactLink: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLinkCollection.VTable, @ptrCast(self.vtable)).FindFirstByRemoteId(@as(*const IContactAggregationLinkCollection, @ptrCast(self)), pSourceType, pAccountId, pRemoteId, ppServerContactLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLinkCollection_FindNext(self: *const T, ppServerContactLink: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLinkCollection.VTable, @ptrCast(self.vtable)).FindNext(@as(*const IContactAggregationLinkCollection, @ptrCast(self)), ppServerContactLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationLinkCollection_get_Count(self: *const T, pCount: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationLinkCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IContactAggregationLinkCollection, @ptrCast(self)), pCount);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn FindFirst(self: *const IContactAggregationLinkCollection, ppServerContactLink: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
        return self.vtable.FindFirst(self, ppServerContactLink);
    }
    pub fn FindFirstByRemoteId(self: *const IContactAggregationLinkCollection, pSourceType: ?[*:0]const u16, pAccountId: ?[*:0]const u16, pRemoteId: ?*const CONTACT_AGGREGATION_BLOB, ppServerContactLink: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
        return self.vtable.FindFirstByRemoteId(self, pSourceType, pAccountId, pRemoteId, ppServerContactLink);
    }
    pub fn FindNext(self: *const IContactAggregationLinkCollection, ppServerContactLink: ?*?*IContactAggregationLink) callconv(.Inline) HRESULT {
        return self.vtable.FindNext(self, ppServerContactLink);
    }
    pub fn get_Count(self: *const IContactAggregationLinkCollection, pCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
};

const IID_IContactAggregationServerPerson_Value = Guid.initString("7fdc3d4b-1b82-4334-85c5-25184ee5a5f2");
pub const IID_IContactAggregationServerPerson = &IID_IContactAggregationServerPerson_Value;
pub const IContactAggregationServerPerson = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        Delete: *const fn(
            self: *const IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        Save: *const fn(
            self: *const IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AggregateId: *const fn(
            self: *const IContactAggregationServerPerson,
            ppAggregateId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AggregateId: *const fn(
            self: *const IContactAggregationServerPerson,
            pAggregateId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntiLink: *const fn(
            self: *const IContactAggregationServerPerson,
            ppAntiLink: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AntiLink: *const fn(
            self: *const IContactAggregationServerPerson,
            pAntiLink: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_AntiLinkBaseline: *const fn(
            self: *const IContactAggregationServerPerson,
            ppAntiLink: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_AntiLinkBaseline: *const fn(
            self: *const IContactAggregationServerPerson,
            pAntiLink: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FavoriteOrder: *const fn(
            self: *const IContactAggregationServerPerson,
            pFavoriteOrder: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FavoriteOrder: *const fn(
            self: *const IContactAggregationServerPerson,
            favoriteOrder: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_FavoriteOrderBaseline: *const fn(
            self: *const IContactAggregationServerPerson,
            pFavoriteOrder: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_FavoriteOrderBaseline: *const fn(
            self: *const IContactAggregationServerPerson,
            favoriteOrder: u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Groups: *const fn(
            self: *const IContactAggregationServerPerson,
            pGroups: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_Groups: *const fn(
            self: *const IContactAggregationServerPerson,
            pGroups: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_GroupsBaseline: *const fn(
            self: *const IContactAggregationServerPerson,
            ppGroups: ?*?*CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_GroupsBaseline: *const fn(
            self: *const IContactAggregationServerPerson,
            pGroups: ?*const CONTACT_AGGREGATION_BLOB,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Id: *const fn(
            self: *const IContactAggregationServerPerson,
            ppId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_IsTombstone: *const fn(
            self: *const IContactAggregationServerPerson,
            pIsTombstone: ?*BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_IsTombstone: *const fn(
            self: *const IContactAggregationServerPerson,
            isTombstone: BOOL,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_LinkedAggregateId: *const fn(
            self: *const IContactAggregationServerPerson,
            ppLinkedAggregateId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_LinkedAggregateId: *const fn(
            self: *const IContactAggregationServerPerson,
            pLinkedAggregateId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_ObjectId: *const fn(
            self: *const IContactAggregationServerPerson,
            ppObjectId: ?*?PWSTR,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        put_ObjectId: *const fn(
            self: *const IContactAggregationServerPerson,
            pObjectId: ?[*:0]const u16,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_Delete(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).Delete(@as(*const IContactAggregationServerPerson, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_Save(self: *const T) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).Save(@as(*const IContactAggregationServerPerson, @ptrCast(self)));
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_AggregateId(self: *const T, ppAggregateId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_AggregateId(@as(*const IContactAggregationServerPerson, @ptrCast(self)), ppAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_AggregateId(self: *const T, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_AggregateId(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_AntiLink(self: *const T, ppAntiLink: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_AntiLink(@as(*const IContactAggregationServerPerson, @ptrCast(self)), ppAntiLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_AntiLink(self: *const T, pAntiLink: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_AntiLink(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pAntiLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_AntiLinkBaseline(self: *const T, ppAntiLink: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_AntiLinkBaseline(@as(*const IContactAggregationServerPerson, @ptrCast(self)), ppAntiLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_AntiLinkBaseline(self: *const T, pAntiLink: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_AntiLinkBaseline(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pAntiLink);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_FavoriteOrder(self: *const T, pFavoriteOrder: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_FavoriteOrder(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pFavoriteOrder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_FavoriteOrder(self: *const T, favoriteOrder: u32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_FavoriteOrder(@as(*const IContactAggregationServerPerson, @ptrCast(self)), favoriteOrder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_FavoriteOrderBaseline(self: *const T, pFavoriteOrder: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_FavoriteOrderBaseline(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pFavoriteOrder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_FavoriteOrderBaseline(self: *const T, favoriteOrder: u32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_FavoriteOrderBaseline(@as(*const IContactAggregationServerPerson, @ptrCast(self)), favoriteOrder);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_Groups(self: *const T, pGroups: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_Groups(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_Groups(self: *const T, pGroups: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_Groups(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_GroupsBaseline(self: *const T, ppGroups: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_GroupsBaseline(@as(*const IContactAggregationServerPerson, @ptrCast(self)), ppGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_GroupsBaseline(self: *const T, pGroups: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_GroupsBaseline(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pGroups);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_Id(self: *const T, ppId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_Id(@as(*const IContactAggregationServerPerson, @ptrCast(self)), ppId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_IsTombstone(self: *const T, pIsTombstone: ?*BOOL) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_IsTombstone(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pIsTombstone);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_IsTombstone(self: *const T, isTombstone: BOOL) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_IsTombstone(@as(*const IContactAggregationServerPerson, @ptrCast(self)), isTombstone);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_LinkedAggregateId(self: *const T, ppLinkedAggregateId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_LinkedAggregateId(@as(*const IContactAggregationServerPerson, @ptrCast(self)), ppLinkedAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_LinkedAggregateId(self: *const T, pLinkedAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_LinkedAggregateId(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pLinkedAggregateId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_get_ObjectId(self: *const T, ppObjectId: ?*?PWSTR) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).get_ObjectId(@as(*const IContactAggregationServerPerson, @ptrCast(self)), ppObjectId);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPerson_put_ObjectId(self: *const T, pObjectId: ?[*:0]const u16) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPerson.VTable, @ptrCast(self.vtable)).put_ObjectId(@as(*const IContactAggregationServerPerson, @ptrCast(self)), pObjectId);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn Delete(self: *const IContactAggregationServerPerson) callconv(.Inline) HRESULT {
        return self.vtable.Delete(self);
    }
    pub fn Save(self: *const IContactAggregationServerPerson) callconv(.Inline) HRESULT {
        return self.vtable.Save(self);
    }
    pub fn get_AggregateId(self: *const IContactAggregationServerPerson, ppAggregateId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AggregateId(self, ppAggregateId);
    }
    pub fn put_AggregateId(self: *const IContactAggregationServerPerson, pAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_AggregateId(self, pAggregateId);
    }
    pub fn get_AntiLink(self: *const IContactAggregationServerPerson, ppAntiLink: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AntiLink(self, ppAntiLink);
    }
    pub fn put_AntiLink(self: *const IContactAggregationServerPerson, pAntiLink: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_AntiLink(self, pAntiLink);
    }
    pub fn get_AntiLinkBaseline(self: *const IContactAggregationServerPerson, ppAntiLink: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_AntiLinkBaseline(self, ppAntiLink);
    }
    pub fn put_AntiLinkBaseline(self: *const IContactAggregationServerPerson, pAntiLink: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_AntiLinkBaseline(self, pAntiLink);
    }
    pub fn get_FavoriteOrder(self: *const IContactAggregationServerPerson, pFavoriteOrder: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_FavoriteOrder(self, pFavoriteOrder);
    }
    pub fn put_FavoriteOrder(self: *const IContactAggregationServerPerson, favoriteOrder: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_FavoriteOrder(self, favoriteOrder);
    }
    pub fn get_FavoriteOrderBaseline(self: *const IContactAggregationServerPerson, pFavoriteOrder: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_FavoriteOrderBaseline(self, pFavoriteOrder);
    }
    pub fn put_FavoriteOrderBaseline(self: *const IContactAggregationServerPerson, favoriteOrder: u32) callconv(.Inline) HRESULT {
        return self.vtable.put_FavoriteOrderBaseline(self, favoriteOrder);
    }
    pub fn get_Groups(self: *const IContactAggregationServerPerson, pGroups: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.get_Groups(self, pGroups);
    }
    pub fn put_Groups(self: *const IContactAggregationServerPerson, pGroups: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.put_Groups(self, pGroups);
    }
    pub fn get_GroupsBaseline(self: *const IContactAggregationServerPerson, ppGroups: ?*?*CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.get_GroupsBaseline(self, ppGroups);
    }
    pub fn put_GroupsBaseline(self: *const IContactAggregationServerPerson, pGroups: ?*const CONTACT_AGGREGATION_BLOB) callconv(.Inline) HRESULT {
        return self.vtable.put_GroupsBaseline(self, pGroups);
    }
    pub fn get_Id(self: *const IContactAggregationServerPerson, ppId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_Id(self, ppId);
    }
    pub fn get_IsTombstone(self: *const IContactAggregationServerPerson, pIsTombstone: ?*BOOL) callconv(.Inline) HRESULT {
        return self.vtable.get_IsTombstone(self, pIsTombstone);
    }
    pub fn put_IsTombstone(self: *const IContactAggregationServerPerson, isTombstone: BOOL) callconv(.Inline) HRESULT {
        return self.vtable.put_IsTombstone(self, isTombstone);
    }
    pub fn get_LinkedAggregateId(self: *const IContactAggregationServerPerson, ppLinkedAggregateId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_LinkedAggregateId(self, ppLinkedAggregateId);
    }
    pub fn put_LinkedAggregateId(self: *const IContactAggregationServerPerson, pLinkedAggregateId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_LinkedAggregateId(self, pLinkedAggregateId);
    }
    pub fn get_ObjectId(self: *const IContactAggregationServerPerson, ppObjectId: ?*?PWSTR) callconv(.Inline) HRESULT {
        return self.vtable.get_ObjectId(self, ppObjectId);
    }
    pub fn put_ObjectId(self: *const IContactAggregationServerPerson, pObjectId: ?[*:0]const u16) callconv(.Inline) HRESULT {
        return self.vtable.put_ObjectId(self, pObjectId);
    }
};

const IID_IContactAggregationServerPersonCollection_Value = Guid.initString("4f730a4a-6604-47b6-a987-669ecf1e5751");
pub const IID_IContactAggregationServerPersonCollection = &IID_IContactAggregationServerPersonCollection_Value;
pub const IContactAggregationServerPersonCollection = extern union {
    pub const VTable = extern struct {
        base: IUnknown.VTable,
        FindFirst: *const fn(
            self: *const IContactAggregationServerPersonCollection,
            ppServerPerson: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByServerId: *const fn(
            self: *const IContactAggregationServerPersonCollection,
            pServerId: ?[*:0]const u16,
            ppServerPerson: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByAggregateId: *const fn(
            self: *const IContactAggregationServerPersonCollection,
            pAggregateId: ?[*:0]const u16,
            ppServerPerson: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindFirstByLinkedAggregateId: *const fn(
            self: *const IContactAggregationServerPersonCollection,
            pAggregateId: ?[*:0]const u16,
            ppServerPerson: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        FindNext: *const fn(
            self: *const IContactAggregationServerPersonCollection,
            ppServerPerson: ?*?*IContactAggregationServerPerson,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
        // TODO: this function has a "SpecialName", should Zig do anything with this?
        get_Count: *const fn(
            self: *const IContactAggregationServerPersonCollection,
            pCount: ?*u32,
        ) callconv(@import("std").os.windows.WINAPI) HRESULT,
    };
    vtable: *const VTable,
    IUnknown: IUnknown,
    pub fn MethodMixin(comptime T: type) type { return struct {
        pub usingnamespace IUnknown.MethodMixin(T);
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPersonCollection_FindFirst(self: *const T, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPersonCollection.VTable, @ptrCast(self.vtable)).FindFirst(@as(*const IContactAggregationServerPersonCollection, @ptrCast(self)), ppServerPerson);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPersonCollection_FindFirstByServerId(self: *const T, pServerId: ?[*:0]const u16, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPersonCollection.VTable, @ptrCast(self.vtable)).FindFirstByServerId(@as(*const IContactAggregationServerPersonCollection, @ptrCast(self)), pServerId, ppServerPerson);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPersonCollection_FindFirstByAggregateId(self: *const T, pAggregateId: ?[*:0]const u16, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPersonCollection.VTable, @ptrCast(self.vtable)).FindFirstByAggregateId(@as(*const IContactAggregationServerPersonCollection, @ptrCast(self)), pAggregateId, ppServerPerson);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPersonCollection_FindFirstByLinkedAggregateId(self: *const T, pAggregateId: ?[*:0]const u16, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPersonCollection.VTable, @ptrCast(self.vtable)).FindFirstByLinkedAggregateId(@as(*const IContactAggregationServerPersonCollection, @ptrCast(self)), pAggregateId, ppServerPerson);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPersonCollection_FindNext(self: *const T, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPersonCollection.VTable, @ptrCast(self.vtable)).FindNext(@as(*const IContactAggregationServerPersonCollection, @ptrCast(self)), ppServerPerson);
        }
        // NOTE: method is namespaced with interface name to avoid conflicts for now
        pub fn IContactAggregationServerPersonCollection_get_Count(self: *const T, pCount: ?*u32) callconv(.Inline) HRESULT {
            return @as(*const IContactAggregationServerPersonCollection.VTable, @ptrCast(self.vtable)).get_Count(@as(*const IContactAggregationServerPersonCollection, @ptrCast(self)), pCount);
        }
    };}
    pub usingnamespace IUnknown.MethodMixin(@This());
    pub fn FindFirst(self: *const IContactAggregationServerPersonCollection, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
        return self.vtable.FindFirst(self, ppServerPerson);
    }
    pub fn FindFirstByServerId(self: *const IContactAggregationServerPersonCollection, pServerId: ?[*:0]const u16, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
        return self.vtable.FindFirstByServerId(self, pServerId, ppServerPerson);
    }
    pub fn FindFirstByAggregateId(self: *const IContactAggregationServerPersonCollection, pAggregateId: ?[*:0]const u16, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
        return self.vtable.FindFirstByAggregateId(self, pAggregateId, ppServerPerson);
    }
    pub fn FindFirstByLinkedAggregateId(self: *const IContactAggregationServerPersonCollection, pAggregateId: ?[*:0]const u16, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
        return self.vtable.FindFirstByLinkedAggregateId(self, pAggregateId, ppServerPerson);
    }
    pub fn FindNext(self: *const IContactAggregationServerPersonCollection, ppServerPerson: ?*?*IContactAggregationServerPerson) callconv(.Inline) HRESULT {
        return self.vtable.FindNext(self, ppServerPerson);
    }
    pub fn get_Count(self: *const IContactAggregationServerPersonCollection, pCount: ?*u32) callconv(.Inline) HRESULT {
        return self.vtable.get_Count(self, pCount);
    }
};


//--------------------------------------------------------------------------------
// Section: Functions (0)
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Section: Unicode Aliases (0)
//--------------------------------------------------------------------------------
const thismodule = @This();
pub usingnamespace switch (@import("../zig.zig").unicode_mode) {
    .ansi => struct {
    },
    .wide => struct {
    },
    .unspecified => if (@import("builtin").is_test) struct {
    } else struct {
    },
};
//--------------------------------------------------------------------------------
// Section: Imports (7)
//--------------------------------------------------------------------------------
const Guid = @import("../zig.zig").Guid;
const BOOL = @import("../foundation.zig").BOOL;
const FILETIME = @import("../foundation.zig").FILETIME;
const HRESULT = @import("../foundation.zig").HRESULT;
const IStream = @import("../system/com.zig").IStream;
const IUnknown = @import("../system/com.zig").IUnknown;
const PWSTR = @import("../foundation.zig").PWSTR;

test {
    @setEvalBranchQuota(
        comptime @import("std").meta.declarations(@This()).len * 3
    );

    // reference all the pub declarations
    if (!@import("builtin").is_test) return;
    inline for (comptime @import("std").meta.declarations(@This())) |decl| {
        _ = @field(@This(), decl.name);
    }
}
